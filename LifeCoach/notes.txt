!!remove logging for RESTClient and eclipseLink (reset for the presentation)

!!use relative path for db and check chache

!!suggest to register a measure if too much time passed or if no measure before goal
(add to statistics)

!!Expose a service for the HealthProfile in order to retrieve or upload a file resource

!!add measuredef creation for HealthProfile (there is the possibility of no measure present)


!!Modulation, portability and Extensibility, evolvability, flexibility, interoperability
(secondary) !!performance, modifiability, reliability, usability, security

!!diet (What to eat), exercises (What to do), health (What/How are you)
!!!three different and independent service modules
??should be some division about profile: old, bodybuilder, young, male, female etc.
	or this id defined directly by the goals (??also some predefined set of "goals/boundaries")
	
	
#ARCHITECTURE DESCRIPTION
Module views show the structure of units of implementation; 
Runtime views (also known as Component & Connector views) show the components that have runtime presence; 
Deployment views show the hardware in frastructure and deployment artifacts; 
Data Model view shows the organization of entities in a database.

#DATABASE
??Division between Health and Lifestyle measures (??category, constant, different table, no division ad all)
	!!decided to keep only lifeprofile, and add profileType to measureDef (e.g. lifestyle, health..)
		PRO: less tables, less duplicate and possible conflicts/controls CONTRO: not real division
		??better impl of profile type, like another table?? !!in our case only two (and seems difficult to add new ones)


#ANNOTATIONS
??How to represent the measures: in some case is ok the minimal, but in other (like the profile) its better
to have the measure name, but it doesn't look good to have all the measuredefinition object
	??add a field and initialize it when needed

#MODEL
!!No sharing of models between services: BloodProfile should define its own Profile model, 
and extract the useful data from the XML response, or even define is new Measure model


#SECONDARY TODO
??Eternalize method to check person and definition validity in the DAO
??Return alwat a Response for the REST methods, instead of the type (and NULL, that works as 204)
??Use and check the type (as defined in the DB) of the values of the various model (e.g. Measure.value)
??ON DELETER Cascade DATABASE
??Using Joda Time
TODO expose adapter as a service
TODO check RESTCLient validity with JSON too
!!update def putting an already present name gives error